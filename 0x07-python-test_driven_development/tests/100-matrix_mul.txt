#!/usr/bin/python3
"""Defines unittests for the matrix_mul function."""


import unittest
from matrix_mul import matrix_mul


class MatrixMulTestCase(unittest.TestCase):
    """Test cases for the matrix_mul function."""

    def test_matrix_mul(self):
        """Test matrix_mul with valid matrices."""
        m_a = [[1, 2], [3, 4]]
        m_b = [[5, 6], [7, 8]]
        result = matrix_mul(m_a, m_b)
        expected = [[19, 22], [43, 50]]
        self.assertEqual(result, expected)

    def test_matrix_mul_invalid_types(self):
        """Test matrix_mul with invalid types for m_a and m_b."""
        m_a = 123
        m_b = "matrix"
        with self.assertRaises(TypeError):
            matrix_mul(m_a, m_b)

    def test_matrix_mul_invalid_shape(self):
        """Test matrix_mul with matrices of invalid shape."""
        m_a = [[1, 2, 3], [4, 5, 6]]
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(ValueError):
            matrix_mul(m_a, m_b)

    def test_matrix_mul_empty_matrices(self):
        """Test matrix_mul with empty matrices."""
        m_a = []
        m_b = [[]]
        with self.assertRaises(ValueError):
            matrix_mul(m_a, m_b)

    def test_matrix_mul_invalid_elements(self):
        """Test matrix_mul with matrices containing invalid elements."""
        m_a = [[1, 2], [3, 'a']]
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(TypeError):
            matrix_mul(m_a, m_b)

    def test_matrix_mul_nonrectangular_matrices(self):
        """Test matrix_mul with nonrectangular matrices."""
        m_a = [[1, 2], [3, 4, 5]]
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(TypeError):
            matrix_mul(m_a, m_b)


if __name__ == '__main__':
    unittest.main()
